pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'firstimage', description: 'Name of the Docker image')
    }
environment {
        AWS_ACCESS_KEY_ID = credentials('aws-credentials')
    }

    stages {
        stage('Code Checkout from Repository') {
            steps {
                git(
                    branch: 'main',
                    credentialsId: 'jenkins',
                    url: 'https://github.com/sreeragdevops/jenkins-terraform.git'
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${params.DOCKER_IMAGE_NAME}:latest . -f Dockerfile"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhubcredential', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "echo '${pwd}' | docker login -u ${user} --password-stdin"
                        sh "docker tag ${params.DOCKER_IMAGE_NAME}:latest ${user}/${params.DOCKER_IMAGE_NAME}:latest"
                        sh "docker push ${user}/${params.DOCKER_IMAGE_NAME}:latest"
                    }
                }
            }
        }
    stage('EKS Connection Test') {
            steps {
                script {
                    // Ensure the withKubeConfig step is correctly set
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubernetes-cloud', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                        sh 'kubectl get nodes'
                        sh 'kubectl apply -f deployment.yaml'
            
                    }
                }
            }
        }
    }
}
